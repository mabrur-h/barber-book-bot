generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id               Int       @id @default(autoincrement())
  telegramUsername String    @unique @map("telegram_username")
  botToken         String    @unique @map("bot_token")
  brandSettings    Json      @map("brand_settings")
  ownerId          BigInt    @map("owner_id")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  status           String    @default("PENDING") @map("status")
  services         Service[]
  admins           Admin[]
  bookings         Booking[]
  users            User[]

  @@map("tenants")
}

model Admin {
  id         Int      @id @default(autoincrement())
  telegramId BigInt   @map("telegram_id")
  role       String   @default("ADMIN") @map("role") // SUPERADMIN, ADMIN
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  tenantId   Int      @map("tenant_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([telegramId, tenantId])
  @@map("admins")
}

model User {
  id         String    @id @default(uuid())
  tenantId   Int       @map("tenant_id")
  telegramId BigInt    @map("telegram_id")
  name       String?
  createdAt  DateTime  @default(now()) @map("created_at")
  tenant     Tenant    @relation(fields: [tenantId], references: [id])
  bookings   Booking[]

  @@unique([tenantId, telegramId])
  @@map("users")
}

model Service {
  id        Int       @id @default(autoincrement())
  name      String    @map("name")
  duration  Int       @map("duration")
  price     Float     @map("price")
  tenant    Tenant    @relation(fields: [tenantId], references: [id])
  tenantId  Int       @map("tenant_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  bookings  Booking[]

  @@map("services")
}

model Booking {
  id          Int      @id @default(autoincrement())
  userId      String   @map("user_id")
  service     Service  @relation(fields: [serviceId], references: [id])
  serviceId   Int      @map("service_id")
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  tenantId    Int      @map("tenant_id")
  bookingTime DateTime @map("booking_time")
  startTime   DateTime @map("start_time")
  endTime     DateTime @map("end_time")
  status      String   @default("PENDING") @map("status") // PENDING, CONFIRMED, CANCELLED, COMPLETED
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [userId], references: [id])

  @@map("bookings")
}

enum TenantStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}
